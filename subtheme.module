<?php
// $Id $

/**
 * @file
 * subtheme.module provides users a settings page for creating a subtheme. 
 */

/**
 * Implementation of hook_help()
 */
function subtheme_help($path, $arg) {
  if ($path == 'admin/help#subtheme') {
    $txt = 'GUI for creating and overriding Subthemes.'; // TODO
    $output = t($txt);
    return $output;
  }
}
/**
 * Implementation of hook_menu().
 */
function subtheme_menu() {
  $items = array();

  // TODO 
  $items['admin/build/subtheme/%/export'] = array(
    'title' => 'export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_export_subtheme', 3), // TODO create function
    'access arguments' => array('subtheme export'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/build/subtheme/activate'] = array(
    'title' => t('Activate'), 
    'description' => t('Activate selected subtheme'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_activation_form'),
    'access arguments' => array('manage subtheme'), 
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/subtheme.activate.inc', 
    'weight' => 10,
  );
  $items['admin/build/subtheme/customize'] = array(
    'title' => t('Customize'), 
    'description' => t('Customize Style Sheet'),
    'page callback' => 'subtheme_customize_page',
    'access arguments' => array('manage subtheme'), 
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/subtheme.customize.inc', 
    'weight' => 11,
  );
  $items['admin/build/subtheme/customize/%'] = array(
    'title callback' => '_subtheme_title_customize_page',
    //'title arguments' => array(arg(4)),
    //'title' => t('Customize Subtheme'), 
    'description' => t('Customize Subtheme Styles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_form'),
    'access arguments' => array('manage subtheme'), 
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/subtheme.customize.inc', 
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function subtheme_perm() {
  return array('administer subtheme', 'manage subtheme', 'subtheme export');
}

/**
 * Implementation of hook_theme().
 */
function subtheme_theme() {
  return array(
    'subtheme_options_details' => array(
      'arguments' => array('selector' => NULL),
    ),
    'subtheme_customize_links' => array(
      'arguments' => array('subthemes' => NULL),
    ),
  );  
}

/**
 * Implementation of hook_form_alter().
 */
function subtheme_form_alter(&$form, &$form_state, $form_id) {
  // Modify forms for adding and editing subtheme objects
  if ($form_id == 'ctools_export_ui_edit_item_form' && arg(2) == 'subtheme') { 
    // admin/build/subtheme/add
    if (arg(3) == 'add' ||
      // admin/build/subtheme/list/subtheme_name/edit
      (arg(3) == 'list' && arg(5) == 'edit')) {
      // Prep data to save.
      $form['#validate'][] = 'subtheme_ctools_export_ui_edit_item_form_validate';
      $form['#submit'][] = 'subtheme_ctools_export_ui_edit_item_form_submit';
    }
  // Modify forms for deleting and reverting subtheme objects
  } else if ($form_id == 'ctools_export_ui_delete_confirm_form' && arg(2) == 'subtheme') {
    $form['#submit'][] = 'subtheme_ctools_export_ui_delete_confirm_form_submit';
  }
}

/**
 * Theme option details (that is, the value
 * for an individual option in the list of options)
 * on the admin/build/subtheme/add and /edit forms.
 */
function theme_subtheme_options_details($selector) {
  /*
    $path = drupal_get_path('module', 'subtheme') .'/subtheme.css';
    drupal_add_css($path);

     $output = '';
     $output .= "<div class='subtheme subtheme-options-details'>";
       $output .= "<div class='subtheme-options-title'>". t($selector->title) ."</div>";
       $output .= "<div class='subtheme-options-name'>". $selector->name ."</div>";
       $output .= "<div class='subtheme-options-selector'>". $selector->css_selector ."</div>";
       $output .= "<div class='subtheme-options-description'>". $selector->description ."</div>";
       //$output .= "<div class='subtheme-options-css'>". ."</div>";
     $output .= "</div>";
  // */

   $output = '';
   $output .= t($selector->title);
   $output .= ', '. $selector->name;
   $output .= ' ('.  $selector->css_selector .')';
   if ($selector->disabled) {
     $output .= ' '. t('DISABLED');   
   }

   return $output;
}

//-------------------------------------------//
// Subtheme                                  //
//-------------------------------------------//

function _subtheme_title_customize_page() {
  $name = arg(4);
  $title = t('Customize Style Sheet: '); 
  $title .= t(subtheme_get_title($name));
  return $title;
}

/**
 * @param $name
 *  string, subtheme name.
 * 
 * @return $subtheme, subtheme object.
 */
function subtheme_get($name) {
  ctools_include('export');
  return subtheme_subtheme_load($name);
}

/**
 * @param $name
 *  string, subtheme name
 *
 * @return $title
 *  Subtheme title.
 */
function subtheme_get_title($name) {
 $subtheme = subtheme_get($name);
 return $subtheme->title;
}

/**
 * @return $subthemes
 *  Objects, subtheme objects.
 */
function subtheme_get_subthemes() {
  ctools_include('export');
  return ctools_export_load_object('subtheme_subtheme'); 
}

/**
 * @param $subtheme
 *  Subtheme object.
 */
function subtheme_set($subtheme) {
  subtheme_subtheme_save($name);
}

/**
 *
 */
function subtheme_admin_options_get() {
  $selectors = mtheme_get_selectors(); 

  // Show all mtheme selectors as options
  $options = array();
  foreach ($selectors as $selector) {
    $details = theme('subtheme_options_details', $selector);
    $options[$selector->name] = $details;
  }

  return $options;
}

/**
 * @return string, active subtheme name.
 */
function subtheme_get_active_subtheme() {
 return db_result(db_query("SELECT name FROM {subtheme_subtheme} WHERE is_active = 1")); 
}

/**
 * Add subtheme css files.
 */
function subtheme_add_css() {
  // Get active subtheme.
  if ($name = subtheme_get_active_subtheme()) {
    $subtheme = subtheme_get($name);
    // Make sure it's not disabled.
    if(!$subtheme->disabled) {
      $name = $subtheme->name;
      // Load style sheet.
      //   In code only -> load stylesheet from feature module // TODO
      //   In database -> load stylesheet from files directory // TODO 
      $stylesheet = file_directory_path() ."/subtheme/$name/$name.css";
      drupal_add_css($stylesheet, 'theme', 'all', TRUE);
    }
  }
  
/*
  $disabled = array();
  $in_code_only = array();
  $in_database = array();
  foreach ($subthemes as $subtheme) {
    $name = $subtheme->name;
    if ($subtheme->disabled) { 
      $disabled[] = $name;
    }
    if ($subtheme->in_code_only) {
      $in_code_only[] = $name;  
    }
    if (!in_array($name, $in_code_only)) {
      $in_database[] = $name; 
    }
  }
     
  // Load style sheets in code (features modules).
  $features = features_get_features();
  foreach ($features as $feature) {
    // Make sure the feature module is enabled and has subtheme subthemes.
    if ($feature->info['features']['subtheme_subtheme'] && $feature->status == 1) {
      $module_name = $feature->name;
      // Check each subtheme.
      foreach ($feature->info['features']['subtheme_subtheme'] as $name) {
        if (!in_array($name, $disabled) && in_array($name, $in_code_only)) {
          $path = drupal_get_path('module', $module_name);
          $stylesheet = $path ."/$module_name.$name.css";     // @todo maybe we don't 
          drupal_add_css($stylesheet, 'theme', 'all', TRUE);  //  need stylesheets in 
        }                                                     //  .info files anymore?
      } 
    }
  }

  // Load style sheets from files directory (in CSS in database)
  foreach ($in_database as $name) {
    if (!in_array($name, $disabled)) {
      $stylesheet = file_directory_path() ."/subtheme/$name.css";
      drupal_add_css($stylesheet, 'theme', 'all', TRUE);
    }  
  }
// */ 
}

/**
 * Activate subtheme.
 *
 * Currently, there can only be one active subtheme at any given point
 * in time. 
 * 
 * @todo Set up subthemes to work more like themes that can be 
 *  enabled/disabled for different users, organic groups, etc.
 *
 * @param $name
 *  string, subtheme name.
 */
function subtheme_activate($name) {
  // Set active subtheme to inactive.
  db_query("UPDATE {subtheme_subtheme} SET is_active = 0 WHERE is_active = 1");
  // Activate selected subtheme.
  db_query("UPDATE {subtheme_subtheme} SET is_active = 1 WHERE name = '%s' ", $name);
}

/**
 * Deactivate subtheme.
 *
 * @param $name
 *  string, subtheme name. 
 */
function subtheme_deactivate($name) {
  db_query("UPDATE {subtheme_subtheme} SET is_active = 0 WHERE name = '%s'", $name);
}

/**
 * @param $name
 *  string, subtheme name
 *
 * @param $options
 */
function subtheme_admin_options_default_values($name, $options) {
  $subtheme = subtheme_get($name);
  $selectors = $subtheme->selectors;
  $default_values = array();
  if ($selectors) {
    foreach ($options as $name => $details) {
      $default_values[$name] = (array_key_exists($name, $selectors)) ? $name : FALSE;
    } 
  } else {
    $default_values[$name] = FALSE;
  }

  return $default_values;
}


//--------------------------------------------------/
// Ctools plugin                                    /
//--------------------------------------------------/
/**
 * Implmenentation of hook_ctools_plugin_directory.
 */
function subtheme_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'export_ui') {
    return 'plugins/'. $plugin;
  }
}

/**
* Implementation of hook_ctools_plugin_api().
*
* Tell CTools that we support the default_mymodule_presets API.
*/
function subtheme_ctools_plugin_api($owner, $api) {
  if ($owner == 'subtheme' && $api == 'default_subtheme_subtheme') {
    return array('version' => 1);
  }
}

//--------------------------------------------------/
// Ctools export hooks                              /
//--------------------------------------------------/

/**
 * Export a myobj and display it in a form.
 * 
 * @param $name
 *  string, unique id for object
 */
function subtheme_export_subtheme(&$form_state, $name) {
  ctools_include('export');
  $obj = subtheme_subtheme_load($name);
  drupal_set_title(check_plain($obj->description));
  $code = subtheme_subtheme_export($obj);
  $lines = substr_count($code, "\n");

  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t('Copy the export text and paste it into another myobj using the import function.'),
  );
  return $form;
}

/**
 * Load a single myobj.
 */
function subtheme_subtheme_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('subtheme_subtheme', 'names', array($name)); 
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Export a myobj.
 */
function subtheme_subtheme_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('subtheme_subtheme', $obj, $indent);
  return $output;
}

/**
 * Save a single myobj.
 */
// TODO 
function subtheme_subtheme_save(&$myobj) {
    $update = (isset($myobj->sid) && is_numeric($myobj->sid)) ? array('sid') : array();
      return drupal_write_record('subtheme_subtheme', $myobj, $update);
}

//-------------------------------------------------/
// Features hooks                                  /
//-------------------------------------------------/
/**
 * Implementation of hook_features_api().
 */
/*
function subtheme_features_api() {
}
// */

/**
 * Implementation of hook_features_export().
 *
 * Component hook.
 * 
 * Add elements to .info file.
 */
function subtheme_subtheme_features_export($data, &$export, $module_name) {
  // Add ctools default hook.
  $export['features']['ctools']["subtheme:default_subtheme_subtheme:1"] = "subtheme:default_subtheme_subtheme:1";
  // Add subtheme_subtheme objects
  foreach ($data as $component) {
    $export['features']['subtheme_subtheme'][$component] = $component;
    // $export['stylesheets']['all'][$component] = $component .'.css'; 
    // @todo for some reason features components need associative arrays
    // to come out right in the .info file. Stylesheet components 
    // seem to need numerical arrays.  
// CONTINUE HERE
// TODO Fix style sheet paths
    $export['stylesheets']['all'][] = $module_name .'.'. $component .'.css'; 
  }
  return array();
}

/**
 * Implementation of hook_features_files().
 * 
 * @todo This hook is provided by a patched version of 
 * Features. See http://github.com/bhirsch/features.
 */
function subtheme_features_files($export, $module_name) {
  $add_files = array();
  if ($subtheme_subthemes = $export['features']['subtheme_subtheme']) {
    // Get css files for each subtheme. (Multiple subthemes can be exported at once). 
    $i = 0;
    foreach ($subtheme_subthemes as $name) {
      $subtheme_path = file_directory_path() ."/subtheme/$name";
      // Get subtheme's CSS file
      $add_files[$i]->name = $module_name .'.'. $name;
      $add_files[$i]->basename = $module_name .'.'. $name .'.css'; 
      $add_files[$i]->filename = $subtheme_path ."/$name.css";
      $add_files[$i]->subdir = "subtheme/$module_name.$name";
      // Check for images.
      $images_path = $subtheme_path .'/images';
      foreach (@file_scan_directory($images_path, '.*') as $file) {
        $i++;
        $add_files[$i]->name = $file->name;
        $add_files[$i]->basename = $file->basename;
        $add_files[$i]->filename = $file->filename;
        $add_files[$i]->subdir = "subtheme/$module_name.$name/images";
      }
      $i++;
    }
  }
  return $add_files;
}

/**
 * Implementation of hook_features_export_render().
 *
 * Component hook.
 */
/*
function subtheme_subtheme_features_export_render($module_name, $data, $export = NULL) {
  $render = array();

  // @todo D7 upgrade:
  // Include implementation of hook_enable to re-write CSS.
  // This will not be necessary in D7. subtheme will be able to call 
  // hook_modules_enabled() to listen for events like this. 
  $code = array();
  $code = '  subtheme_css(); // rewrite files/subtheme/subtheme.css when module is enabled'; 
  $render['enable'] = $code;

  // @todo D7 upgrade:
  // Include implementation of hook_disable to re-write CSS.
  // This will not be necessary in D7. subtheme will be able to call 
  // hook_modules_enabled() to listen for events like this. 
  $code = array();
  $code = '  subtheme_css(); // rewrite files/subtheme/subtheme.css when module is enabled'; 
  $render['disable'] = $code;

  // This writes implementation of hook_default_subtheme_subtheme just as features/ctools
  // would do if there were no implementation of hook_features_export render here.
  $code = array();
  $code[] = '$export = array();';
  foreach ($data as $name) {
    $subtheme = subtheme_subtheme_load($name);
    $code[] = subtheme_subtheme_export($subtheme);
    $code[] = "  \$export['{$name}'] = \$subtheme;";
  }
  $code[] = '  return $export;';
  $code = implode("\n", $code);
  $render['default_subtheme_subtheme'] = $code;

  return $render;
}
// */

/**
 * Implementation of hook_features_export_options().
 */
// TODO 

/**
 * Implementation of hook_features_revert().
 */
/*
function subtheme_features_export_revert($module_name) {
print("subtheme_features_export_revert here: \n");
print_r($module_name, TRUE);
  $mycomponents = module_invoke_all($module_name, 'subtheme_defaults');
  if (!empty($$mycomponents)) {
    foreach ($mycomponents as $mycomponent) {
      mycomponent_delete($mycomponent);
    }
  }
}
// */

