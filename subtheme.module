<?php
// $Id $

/**
 * @file
 * subtheme.module provides users a settings page for creating a subtheme.
 */

//----------------------------------//
// Drupal hooks                     //
//----------------------------------//

/**
 * Implements hook_help().
 */
function subtheme_help($path, $arg) {
  if ($path == 'admin/help#subtheme') {
    $txt = 'GUI for creating and overriding Subthemes.';
    $output = t($txt);
    return $output;
  }
}
/**
 * Implements hook_menu().
 */
function subtheme_menu() {
  $items = array();

  $items['admin/structure/subtheme/%/export'] = array(
    'title' => 'export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_export_subtheme', 3),
    'access arguments' => array('subtheme export'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/subtheme/activate'] = array(
    'title' => t('Activate'),
    'description' => t('Activate selected subtheme'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_activation_form'),
    'access arguments' => array('manage subtheme'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/subtheme.activate.inc',
    'weight' => 10,
  );
  $items['admin/structure/subtheme/edit/%'] = array(
    'title callback' => '_subtheme_title_customize_page',
    'description' => t('Customize Subtheme Styles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subtheme_form'),
    'access arguments' => array('manage subtheme'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/subtheme.edit.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function subtheme_permission() {
  return array(
    'administer subtheme' => array(
      'title' => t('administer subtheme'),
      'description' => t('Create new subthemes.'),
    ),
    'manage subtheme' => array(
      'title' => t('manage subtheme'),
      'description' => t('Edit and activate existing subthemes.'),
    ),
    'subtheme export' => array(
      'title' => t('subtheme export'),
      'description' => t('Export subthemes.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function subtheme_theme() {
  return array(
    'subtheme_options_details' => array(
      'variables' => array('selector' => NULL),
    ),
    'subtheme_activate_options' => array(
      'variables' => array('subtheme' => NULL),
      'file' => 'includes/subtheme.activate.inc',
    ),
    'subtheme_activate' => array(
      'render element' => 'form',
      'file' => 'includes/subtheme.activate.inc',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function subtheme_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);
  // Modify forms for adding and editing subtheme objects
  if ($form_id == 'ctools_export_ui_edit_item_form' && arg(2) == 'subtheme') {
    // admin/build/subtheme/add
    if (arg(3) == 'add' ||
      // admin/build/subtheme/list/subtheme_name/edit
      (arg(3) == 'list' && (arg(5) == 'edit' || arg(5) == 'clone') )) {
      // Prep data to save.
      $form['#validate'][] = 'subtheme_ctools_export_ui_edit_item_form_validate';
      $form['#submit'][] = 'subtheme_ctools_export_ui_edit_item_form_submit';
    }
    // Modify forms for deleting and reverting subtheme objects
  }
  else if ($form_id == 'ctools_export_ui_delete_confirm_form' && arg(2) == 'subtheme') {
    $form['#submit'][] = 'subtheme_ctools_export_ui_delete_confirm_form_submit';
  }
}

/**
 * Theme option details (that is, the value
 * for an individual option in the list of options)
 * on the admin/build/subtheme/add and /edit forms.
 */
function theme_subtheme_options_details($variables) {
  $selector = $variables['selector'];
  $path = drupal_get_path('module', 'subtheme') . '/subtheme.css';
  drupal_add_css($path);

  $output = '';
  $output .= '<div class="subtheme-admin-css-selector">';
  $output .= '<div>';
  $output .= '/*** ' . t($selector->title) . ', ' . $selector->name . ' ';
  if (property_exists($selector, 'disabled')) {
    if ($selector->disabled) {
      $output .= ' ' . t('(DISABLED) ');
    }
  } 
  $output .= ' ***/';
  $output .= '</div>';
  $output .= '<div>' .  $selector->css_selector . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_init().
 */
function subtheme_init() {
  $subtheme = subtheme_get_active_subtheme('object');
  $stylesheet = subtheme_get_css($subtheme->name, 'relative');
  $options = array(
    'group' => CSS_THEME, 
    'every_page' => TRUE, 
    'weight' => 101, // Heavier than mtheme, which weighs 100.
    'type' => 'file',
  );
  drupal_add_css($stylesheet, $options);
}

//-------------------------------------------//
// Subtheme                                  //
//-------------------------------------------//

/**
 * Get the path to mysubtheme.css.
 * 
 * @name 
 *  String. Name of subtheme.
 * 
 * @param $type
 *  (optional) String. Designate what type of path should be returned.
 *  - 'relative' returns a path relative to Drupal's root directory.
 *  - 'url' returns a URL.
 * 
 * @return $path
 *  String. Relative or absolute path to stylesheet.
 */
function subtheme_get_css($name, $type = 'relative') {
  // Get active subtheme.
  if ($subtheme = subtheme_get_active_subtheme('object')) {
    // It's not disabled and it's stored in code.
    if (!$subtheme->disabled && $subtheme->in_code_only) {
      // Get info about the features module that has the active subtheme.
      $feature = subtheme_get_feature($name);
      if ($feature->status == 1) { // Make sure feature is enabled.
        $module_name = $feature->name;
        $path = drupal_get_path('module', $module_name);
        $stylesheet = $path . "/subtheme/$name/$name.css";
      }
    }
    // If it's not disabled and it's not in code only, it's in the files directory.
    else if (!$subtheme->disabled && !$subtheme->in_code_only) {
      // This is the D7 equivalent of file_directory_path().
      $public = new DrupalPublicStreamWrapper;
      $files_directory = $public->getDirectoryPath();
      // Load style sheet.
      $stylesheet = $files_directory . "/subtheme/$name/$name.css";
    }
  }

  // Build absolute URL.  
  if ($type == 'url') {
    $stylesheet = file_create_url($stylesheet);
  }

  return $stylesheet;
}

/**
 * @return String. Page title for admin/structure/subtheme/edit/$name.
 */
function _subtheme_title_customize_page() {
  $name = arg(4);
  $title = t('Customize Style Sheet: ');
  $title .= t(subtheme_get_title($name));
  return $title;
}

/**
 * @param $name
 *  string, subtheme name.
 *
 * @return $subtheme, subtheme object.
 */
function subtheme_get($name) {
  ctools_include('export');
  return subtheme_subtheme_load($name);
}

/**
 * @param $name
 *  string, subtheme name
 *
 * @return $title
 *  Subtheme title.
 */
function subtheme_get_title($name) {
  $subtheme = subtheme_get($name);
  return $subtheme->title;
}

/**
 * @return $subthemes
 *  Objects, subtheme objects.
 */
function subtheme_get_subthemes() {
  ctools_include('export');
  return ctools_export_load_object('subtheme_subtheme');
}

/**
 * Save an edited subtheme and handle related workflow relating to subtheme state.
 *  - copy files from module to files directory when subthem is newly overridden.
 *  - save object when Ctools hasn't saved it already
 *
 * @param $subtheme
 *  Subtheme object.
 *
 * @param $op
 *  array, options can include any (or none) or the following:
 *  $op = array('in code only', 'ctools save', 'clone')
 *  - 'in code only'
 *        In case some other module saves or
 *        modifies the subtheme object before this function is called,
 *        'in code only' tells subtheme_save() to
 *        copy files from a features module to the files/subtheme
 *        directory, even if $subtheme->in_code_only is false.
 *  - 'ctools save'
 *        If subtheme_save() is being called from
 *        a Ctools form and the $subtheme object has already been saved,
 *        this indicates that we don't need to call subtheme_subtheme_save()
 *        here, just let this function take care of the additional
 *        steps (otherwise you get an ugly mysql error).
 *  - 'clone'
 *        A subtheme is being cloned. Copy files from the original subtheme
 *        to a new directory for the new subtheme.
 */
function subtheme_save($subtheme, $op = array()) {
  $ctools_save = (in_array('ctools save', $op)) ? TRUE : FALSE;
  $clone = (in_array('clone', $op)) ? TRUE : FALSE;
  $in_code_only = (in_array('in code only', $op)) ? TRUE : FALSE;

  if (!$ctools_save) {
    // Ctools hook, mymodule_myobj_save($obj).
    subtheme_subtheme_save($subtheme);
  }

  // Re-write mysubtheme.css.
  ctools_include('subtheme', 'subtheme');
  subtheme_css($subtheme);

  // If subtheme being saved is in code only (newly overridden)
  // copy images and CSS to files/subtheme directory.
  //
  // Handle undefined index error.
  if (!property_exists($subtheme, 'in_code_only')) {
    $subtheme->in_code_only = FALSE;  
  }
  if ($subtheme->in_code_only || $in_code_only || arg(3) == 'add') {
    // Copy image files
    subtheme_copy_files($subtheme); // @todo add error handling
  }

  if ($clone) {
    $original = arg(4);
    // Copy image files
    subtheme_copy_files($subtheme, $original); // @todo add error handling
  }

}

/**
 *
 */
function subtheme_admin_options_get() {
  $selectors = mtheme_get_selectors();

  // Show all mtheme selectors as options
  $options = array();
  foreach ($selectors as $selector) {
    $details = theme('subtheme_options_details', array('selector' => $selector));
    $options[$selector->name] = $details;
  }

  return $options;
}

/**
 * @param $return
 *  - 'string' (default), Return the name of the active subtheme as a string.
 *  - 'object', Return the active subtheme object.
 * 
 * @return string, active subtheme name. FALSE if no active subtheme.
 */
function subtheme_get_active_subtheme($return = 'string') {
  // @todo Cache active subtheme rathe than load all active subthemes?
  $active_subtheme = FALSE;
  $subthemes = subtheme_get_subthemes();
  $count = 0;
  foreach ($subthemes as $subtheme) {
    if ($subtheme->is_active) {
      $active_subtheme = TRUE;
      $active_subtheme = $subtheme->name;
      ++$count;
    }
  }
  // There should never be more than one active subtheme at any time.
  // But if multiple subthemes are stored in code with is_active set to TRUE,
  // it's conceiveable that multiple subthemes could show up as active here.
  // If $count > 1, set things straight. Make one active and the rest
  // overridden as inactive.
  if ($count > 1) {
    subtheme_activate($active_subtheme);
  }
  if (!$active_subtheme) { // There is no active subtheme.
    return FALSE;
  }

  if ($return == 'string') {
    return $active_subtheme;
  } else if ($return == 'object') {
    return $subthemes[$active_subtheme]; 
  }
}

/**
 * @param $name
 *  string, subtheme name
 *
 * @return $feature
 *  object, results of features_get_feature($name) for the
 *  feature module that stores the subtheme requested.
 *
 * @todo cache info about which subtheme is stored in which
 *     module so we don't have to load all these features
 *     modules here.
 */
function subtheme_get_feature($name) {
  $features = features_get_features();
  $feature_with_subtheme = '';

  foreach ($features as $feature) {
    // Check for subthemes.
    if ($feature->info['features']['subtheme_subtheme']) {
      foreach ($feature->info['features']['subtheme_subtheme'] as $subtheme_name) {
        if ($subtheme_name == $name) {
          $feature_with_subtheme = $feature;
        }
      }
    }
  }

  return $feature_with_subtheme;
}

/**
 * Activate subtheme.
 *
 * Currently, there can only be one active subtheme at any given point
 * in time.
 *
 * @todo Set up subthemes to work more like themes that can be
 *  enabled/disabled for different users, organic groups, etc.
 *
 * @param $name
 *  string, subtheme name.
 */
function subtheme_activate($name) {
  $subthemes = subtheme_get_subthemes();
  foreach ($subthemes as $subtheme) {
    if ($subtheme->name != $name && $subtheme->is_active) {
      // Set active subtheme to inactive.
      $subtheme->is_active = FALSE;
      subtheme_save($subtheme);
    }
    else if ($subtheme->name == $name && !$subtheme->is_active) {
      // Activate selected subtheme.
      $subtheme->is_active = TRUE;
      subtheme_save($subtheme);
// TODO move logo stuff into subtheme_save
      subtheme_set_logo($subtheme);
    // Note: Use 'else if' next. Otherwise 'else' lets disabled subthemes slip in.
    }
    else if ($subtheme->name == $name && $subtheme->is_active) {
      // Subtheme is already active. Make sure it's logo is set correctly.
      subtheme_set_logo($subtheme);
    }
  }

}

/**
 * @param $subtheme
 *  object, subtheme object
 *
 * TODO UPDATE LOGO_PATH. THIS SHOULD PROBABLY ONLY REQUIRE SUBTHEME NAME.
 */
function subtheme_set_logo($subtheme) {
  $logo_path = subtheme_get_logo($subtheme);
  $settings = variable_get('theme_settings', NULL);
  $settings['logo_path'] = $logo_path;
  variable_set('theme_settings', $settings);
}

/**
 * Look in subtheme directory for a logo (a file
 * named logo, with any extension).
 *
 * @param $subtheme
 *  object, subtheme_subtheme object
 *
 * @return string, path to this subtheme's logo (not necessarily the active logo)
 */
function subtheme_get_logo($subtheme) {
  $path = subtheme_images_path($subtheme); //Path to files dir or features module w files.
  foreach (@file_scan_directory($path, '/.*/') as $file) {
    // Add form items
    if ($file->name == 'logo') {
      return $file->filename;
    }
  }
}


/**
 * When a subtheme stored in code is modified through Drupal's GUI
 * (a subtheme that is disabled by default becomes enabled,
 * someone changes the text's color, etc.), copy all the files
 * from the subtheme's features module into the files directory,
 * otherwise relative links to background images will break when
 * the new CSS file is written in the files/subtheme/subtheme_name
 * directory.
 *
 * @param $subtheme
 *  object, subtheme_subtheme object.
 *
 * @param $original
 *  string, the original being cloned (if a subtheme is being cloned)
 *
 */
function subtheme_copy_files($subtheme, $original = NULL) {
  $name = $subtheme->name;
  $new = (arg(3) == 'add') ? TRUE : FALSE; // Brand new subtheme.

  // Get path(s) to image(s)
  if ($new) { // A new subtheme is being created.
    // Build an array of image paths for each mtheme_selector with images.
    $images_paths = array();
    foreach ($subtheme->selectors as $selector) {
      $images_paths[] = mtheme_images_path($selector);
    }
  }
  else if (!$original) { // An existing subtheme is being overridden
    $images_path = subtheme_images_path($subtheme, 'in code only');
  }
  else { // An existing subtheme is being cloned.
    $original = subtheme_get($original);
    $images_path = subtheme_images_path($original);
  }

  // Copy images.
  $new_images_path = subtheme_images_path($subtheme, 'files');
  file_prepare_directory($new_images_path, FILE_CREATE_DIRECTORY);
  if ($new) {
    // Check each mtheme_selector for images. Copy any we find.
    foreach ($images_paths as $images_path) {
      foreach (@file_scan_directory($images_path, '/.*/') as $file) {
        $destination = $new_images_path . "/" . $file->filename;
        $source = $file->uri; 
        if ($filename = file_unmanaged_copy($source, $destination, FILE_EXISTS_REPLACE)) {
          $txt = t("New file saved: ") . l($filename, $filename);
          drupal_set_message($txt);
        } else {
          $txt = t("Failed to save file here: ") . $destination;
          drupal_set_message($txt, 'error');
        }
      }
    }
  }
  else { // Subtheme is being cloned or overridden.
    foreach (@file_scan_directory($images_path, '/.*/') as $file) {
      //$file_path = $new_images_path . "/" . $file->basename;
     // file_copy($file->filename, $file_path, FILE_EXISTS_REPLACE);
      $destination = $new_images_path . "/" . $file->filename;
      $source = $file->uri;
      if ($filename = file_unmanaged_copy($source, $destination, FILE_EXISTS_REPLACE)) {
        $txt = t("New file saved: ") . l($filename, $filename);
        drupal_set_message($txt);
      } else {
        $txt = t("Failed to save file here: ") . $destination;
        drupal_set_message($txt, 'error');
      }
    }
  }
  // return ? // @todo Add error handling. Notify user if unsuccessful?
  // These file functions do a pretty good job notifying
  // administrators about errors,
  // still it seems like there should be something
  // subtheme-specific here.
}

/**
 * Find the path to the subtheme's images directory.
 *
 * If no status is passed, assume we're finding out the
 * current images file location. (If the subtheme is in code only,
 * the images directory lives in a features module. Otherwise, the
 * images directory lives in files/subtheme/subtheme_name/images.
 * If a status is passed, return the requested path (for an images directory
 * when in code only, or an images directory in the files directory).
 *
 * @param $subtheme
 *  object, subtheme_subtheme object.
 *  or
 *  string, subtheme name, only use string if you know images are in files directory
 *
 * @param $status
 *  string, 'in code only' OR 'files'
 *
 * @param $type
 *  String. 
 *  - 'relative', Return value should be a path relative to Drupal's root directory 
 *    (e.g. sites/default/files/subtheme/mysubtheme/images)
 *  - 'uri', Return value should be something like: 
 *     public://files/subtheme/myselector/images)
 *
 * @return
 *  string, path/to/images/directory.
 */
function subtheme_images_path($subtheme, $status = FALSE, $type = 'relative') {

  if (is_object($subtheme)) {
    $name = $subtheme->name;
  }
  else if (is_string($subtheme)) {
    $name = $subtheme;
  }

  // Build prefix. The prefix will be one of these: 
  // - sites/mysite.com/files/
  // - sites/default/files/
  // - public://
  //
  // It's one of the first two options above.
  if ($type == 'relative') {
    $public = new DrupalPublicStreamWrapper;
    $prefix = $public->getDirectoryPath();
    $prefix .= '/';
  }
  // This will almost always return public://, but it could be set
  // to something else.
  else if ($type == 'uri') {
     $prefix = file_build_uri(''); 
  } 
  else {
    $txt = t('No type defined. See function: mtheme_images_path() in mtheme.module.');  
    drupal_set_message($txt, 'error');
  }

  if (!$status && $subtheme->in_code_only || $status == 'in code only') {
    $feature = subtheme_get_feature($name);
    $module_name = $feature->name;
    $module_path = drupal_get_path('module', $module_name);
    $path = $module_path . "/subtheme/$name/images";
  }
  else { // images aren't stored in a features module, or $status == 'files'
    $path = $prefix . 'subtheme/' . $name . '/images';
    $path = file_stream_wrapper_uri_normalize($path);
  }

  return $path;
}

/**
 * Deactivate subtheme.
 *
 * @param $name
 *  string, subtheme name.
 */
function subtheme_deactivate($name) {
  $subtheme = subtheme_get($name);
  $subtheme->is_active = FALSE;
  subtheme_save($subtheme);
}

/**
 * @param $name
 *  string, subtheme name
 *
 * @param $options
 */
function subtheme_admin_options_default_values($name, $options) {
  if ($subtheme = subtheme_get($name)) {
    $selectors = $subtheme->selectors;
    $default_values = array();
    if ($selectors) {
      foreach ($options as $name => $details) {
        $default_values[$name] = (array_key_exists($name, $selectors)) ? $name : FALSE;
      }
    }
  }
  else {
    $default_values[$name] = FALSE;
  }

  return $default_values;
}


//--------------------------------------------------/
// Ctools plugin                                    /
//--------------------------------------------------/
/**
 * Implmenentation of hook_ctools_plugin_directory.
 */
function subtheme_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function subtheme_ctools_plugin_api($owner, $api) {
  if ($owner == 'subtheme' && $api == 'default_subtheme_subtheme') {
    return array('version' => 1);
  }
}

//--------------------------------------------------/
// Ctools export hooks                              /
//--------------------------------------------------/

/**
 * Export a myobj and display it in a form.
 *
 * @param $name
 *  string, unique id for object
 */
function subtheme_export_subtheme($form, &$form_state, $name) {
  ctools_include('export');
  $obj = subtheme_subtheme_load($name);
  $title = check_plain($obj->description);
  drupal_set_title($title);
  $code = subtheme_subtheme_export($obj);
  $lines = substr_count($code, "\n");

  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t('Copy the export text and paste it into another myobj using the import function.'),
  );
  return $form;
}

/**
 * Load a single myobj.
 */
function subtheme_subtheme_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('subtheme_subtheme', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Export a myobj.
 */
function subtheme_subtheme_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('subtheme_subtheme', $obj, $indent);
  return $output;
}

/**
 * Save a single myobj.
 */
function subtheme_subtheme_save(&$myobj) {
  $update = (isset($myobj->sid) && is_numeric($myobj->sid)) ? array('sid') : array();
  return drupal_write_record('subtheme_subtheme', $myobj, $update);
}

//-------------------------------------------------/
// Features hooks                                  /
//-------------------------------------------------/
/**
 * Implements hook_features_export().
 *
 * Component hook.
 *
 * Add elements to .info file.
 */
function subtheme_subtheme_features_export($data, &$export, $module_name) {
  // Add dependencies
  $export['dependencies']['ctools'] = "ctools";
  $export['dependencies']['features'] = "features";
  $export['dependencies']['mtheme'] = "mtheme";
  $export['dependencies']['subtheme'] = "subtheme";
  // Add ctools default hook.
  $export['features']['ctools']["subtheme:default_subtheme_subtheme:1"] = "subtheme:default_subtheme_subtheme:1";
  // Add subtheme_subtheme objects
  foreach ($data as $component) {
    $export['features']['subtheme_subtheme'][$component] = $component;
    // $export['stylesheets']['all'][$component] = $component .'.css';
    // @todo for some reason features components need associative arrays
    // to come out right in the .info file. Stylesheet components
    // seem to need numerical arrays.
    //
    // @todo This isn't actually used to load stylesheets. Exclude from info files
    //  for now, just to keep things tidy. Revisit later.
    // $export['stylesheets']['all'][] = "subtheme/$module_name.$component/$component.css";
  }
  return array();
}

/**
 * Implements hook_features_files().
 *
 * @todo This hook is provided by a patched version of
 * Features. See http://github.com/bhirsch/features.
 * 
 * TODO Update this for D7 hook.
 */
function subtheme_features_files($export, $module_name) {
  $add_files = array();
  if ($subtheme_subthemes = $export['features']['subtheme_subtheme']) {
    // Get css files for each subtheme. (Multiple subthemes can be exported at once).
    $i = 0;
    foreach ($subtheme_subthemes as $name) {
      $public = new DrupalPublicStreamWrapper;
      $files_directory = $public->getDirectoryPath();
      $subtheme_path = $files_directory . "/subtheme/$name";
      // Get subtheme's CSS file
      $add_files[$i]->name = $name;
      $add_files[$i]->filename = $name . '.css';
      $add_files[$i]->uri = $subtheme_path . "/$name.css";
      $add_files[$i]->subdir = "subtheme/$name";
      // Check for images.
      $images_path = $subtheme_path . '/images';
      foreach (@file_scan_directory($images_path, '/.*/') as $file) {
        $i++;
        $add_files[$i]->name = $file->name;
        $add_files[$i]->filename = $file->filename;
        $add_files[$i]->uri = $file->uri;
        $add_files[$i]->subdir = "subtheme/$name/images";
      }
      $i++;
    }
  }
  return $add_files;
}
